{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Square","props","id","className","style","width","height","onClick","handleSquareClick","Board","rows","counter","i","this","n","row","j","push","key","playerTurn","createBoardRows","board","length","React","Component","ProgressBarBlock","ProgressBar","state","blockWidth","App","k","playerMoves","gameStarted","topScore","startingRound","pattern","e","setState","target","value","shift","alert","setTimeout","startRound","pickKRandomSquares","showSquares","parseInt","squares","Math","floor","random","ids","el","document","getElementById","classList","add","remove","slice","type","defaultValue","onChange","resizeBoard","bind","min","max","disabled","changeStartingRound","numberOfBlocks","toString","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5faaf0d2.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nfunction Square(props) {\n  return (\n    <div id={props.id} className=\"square\"\n      style={{ width: props.width, height: props.width }}\n      onClick={() => props.handleSquareClick(props.id)}\n    />\n  );\n}\n\nclass Board extends React.Component {\n  createBoardRows() {\n    let rows = [];\n    let counter = 0;\n    for (let i = 0; i < this.props.n; i++) {\n      let row = [];\n      for (let j = 0; j < this.props.n; j++) {\n        row.push(<Square key={counter}\n          handleSquareClick={this.props.handleSquareClick}\n          id={counter}\n          playerTurn={this.props.playerTurn}\n          width={this.props.width} />)\n        counter++;\n      }\n      rows.push(row);\n    }\n    return rows;\n  }\n\n  render() {\n    const rows = this.createBoardRows();\n    let board = [];\n    for (let i = 0; i < rows.length; i++) {\n      board.push(<div key={i} className=\"boardRow\">{rows[i]}</div>);\n    }\n    return (\n      <div>\n        <div className=\"board\">{board}</div>\n      </div>\n\n    )\n  }\n}\n\nfunction ProgressBarBlock(props) {\n  return (\n    <div className=\"progressBarBlock\" style={{ width: props.width }}></div>\n  );\n}\n\nclass ProgressBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { blockWidth: this.props.blockWidth }\n  }\n  render() {\n    return (\n      <div id=\"progressBar\" className={\"progressBar\"}>\n        <ProgressBarBlock width={this.props.blockWidth} />\n      </div>\n    )\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { n: 3, k: 2, playerMoves: 0, gameStarted: false, topScore: 'X', startingRound: 2 };\n    this.playerTurn = false;\n    this.pattern = [];\n  }\n  resizeBoard(e) {\n    if (this.state.gameStarted) return;\n    this.setState({\n      n: e.target.value\n    })\n  }\n  handleSquareClick(i) {\n    if (!this.playerTurn) return;\n\n    // Player made wrong move.\n    if (i !== this.pattern.shift()) {\n      alert('GAME OVER');\n      this.playerTurn = false;\n      this.pattern = [];\n      this.setState({ gameStarted: false, k: this.state.startingRound, playerMoves: 0 });\n      return;\n    }\n\n    if (this.pattern.length === 0) {\n      this.setState({ playerMoves: this.state.playerMoves + 1 }, () => {\n        setTimeout(() => {\n          this.setState({\n            playerMoves: 0,\n            k: this.state.k + 1,\n            topScore: this.state.topScore === 'X' ?\n              this.state.k + 1 : (this.state.k + 1 > this.state.topScore ?\n                this.state.k + 1 : this.state.topScore)\n          }, () => {\n            this.startRound();\n          });\n        }, 1000, this);\n      });\n    } else {\n      this.setState({ playerMoves: this.state.playerMoves + 1 });\n    }\n  }\n  startRound() {\n    if (!this.state.gameStarted) {\n      this.setState({ gameStarted: true });\n    }\n    this.playerTurn = false;\n    this.pattern = this.pickKRandomSquares(this.state.n, this.state.k);\n    this.showSquares(this.pattern);\n  }\n  changeStartingRound(e) {\n    this.setState({\n      k: parseInt(e.target.value),\n      startingRound: parseInt(e.target.value)\n    });\n  }\n  pickKRandomSquares(n, k) {\n    let squares = [];\n    for (let i = 0; i < k; i++) {\n      squares.push(Math.floor(Math.random() * n * n));\n    }\n    this.pattern = squares;\n    return squares;\n  }\n  showSquares(ids) {\n    if (ids.length === 0) {\n      this.playerTurn = true;\n      return;\n    };\n    let el = document.getElementById(ids[0]);\n    el.classList.add(\"highlight\");\n    setTimeout(() => {\n      el.classList.remove(\"highlight\");\n      if (ids.length > 0) {\n        setTimeout(() => this.showSquares(ids.slice(1)), 500);\n      }\n    }, 1000);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n\n        <div className={this.state.gameStarted ? \"inactive\" : null}>\n          <input type=\"range\" defaultValue={this.state.n} onChange={this.resizeBoard.bind(this)}\n            min={2} max={5} disabled={this.state.gameStarted}></input>\n          {this.state.n} by {this.state.n} board\n        </div>\n\n        <div className={this.state.gameStarted ? \"inactive\" : null}>\n          Starting round:\n          <input type=\"number\" value={this.state.startingRound} onChange={this.changeStartingRound.bind(this)}\n            min={1} disabled={this.state.gameStarted}></input>\n        </div>\n\n        <button onClick={this.startRound.bind(this)} disabled={this.state.gameStarted}>\n          <b>PLAY</b>\n        </button>\n\n        <div>Top score: <b>{this.state.topScore}</b></div>\n\n        <div>Squares remaining: <b>{this.state.k - this.state.playerMoves}</b></div>\n\n        <ProgressBar\n          className={\"progressBar\"}\n          numberOfBlocks={this.state.playerMoves}\n          blockWidth={((100 / this.state.k) * this.state.playerMoves).toString() + \"%\"} />\n\n        <Board n={this.state.n}\n          handleSquareClick={this.handleSquareClick.bind(this)}\n          playerTurn={this.state.playerTurn}\n          width={(80 / this.state.n).toString() + 'vw'} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}